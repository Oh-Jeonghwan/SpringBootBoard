요구사항확인 => 설계 (UML, DB 설계)

개발 프로세스
요구사항 분석 -> 프로그램 설계
-> 프로그램 구현 -> 테스트 -> 납품 -> 유지보수

모델링
: 모델을 만드는 작업, 
  개발 프로세스에서 요구사항분석~설계 까지 모델링 단계
모델링 방법
1. 애자일방법 : 일정한 주기를 가지고 계속 진행 - 검토를 반복
	       필요할 때마다 요구사항을 더하고, 수정이 반복됨
	       => 점점 살을 붙여나가는 형식
2. 폭포수방법 : 각 단계가 마치 폭포수처럼 위에서 아래의 흐름대로
	       "차례대로 진행"되는 방법
* 어떤 방식을 더 선호? 애자일 (프로젝트 규모가 크니까)

UML : Unified Modeling Language 의 약자
        개발할때 필요한 개발 문서들을 도식화할때 사용함
=> 그림그리는것 (유스케이스 다이어그램, 클래스 다이어그램 등등)
* 왜 도식화를 할까? 의사소통 (고객과 개발자 간의 소통)
		대규모 프로젝트 구조의 로드맵을 짤 때 유용
		백엔드 문서용으로 제격 (인수인계 시 좋음)

유스케이스 다이어그램 
: 동적 행위 다이어그램, 사용자 관점의 시스템 동작 요구사항을 표현
=> 유스케이스 다이어그램 요소 : 액터(굳이 사람이 아니라 외부 시스템도 포함), 
			     유스케이스(행위, 개별적인 기능 하나하나 == 기능 단위),
			     관계(화살표, 기능의 흐름 == 누가 무슨 행위를 하는지)
관계의 종류
- 액터 -> 유스케이스 : 연관관계 (유스케이스와 액터의 상호작용, 실선)
- 유스케이스 ->유스케이스 (include) : 기능을 포함하는 관계 (반드시 해야만 하는 선행관계, 화살표 찔리는 애가 선행, 점선)
- 유스케이스 ->유스케이스 (extend) : 특정 조건이나 선택에 따라 발생하는 관계 (선택적인 관계, 화살표 뻗어나가는 애가 선택적으로 이루어질 수 있음)

DB 모델링
주요개념
- 엔티티 : 자바에서 클래스의 개념 == 테이블과 같은 개념
- 속성 : 자바에서 클래스 구현할 때 "필드" == 컬럼과 같은 개념
- 인스턴스 : 실제 담긴 값들 == 행과 같은 개념 == 자바에서는 VO 객체와 같음
- 관계 : 두 엔티티(테이블) 간의 관련성을 나타냄
- 카디널리티 : 관계를 맺을 때 1:1, 1:N 인지 등을 나타내는 숫적인 표현
- 주식별자 : primary key (기본키) 의 개념
- 외래식별자 : foreign key (외래키) 의 개념
=> 기존의 데이터를 주식별자로 지정할 수 있지만
     SEQUENCE 를 이용해서 채번하는 것이 더 편하다. (인위적 식별자)

모델링 단계
개념적 모델링 -> 논리적 모델링 -> 물리적 모델링
개념적 : 엔티티들 간의 관계를 뽑아내는 과정(ER 다이어그램 틀을 만든다)
논리적 : 관계를 디테일하게 맺어주는 과정
          (ER 다이어그램을 이용해서 관계 스키마 모델을 만드는 과정)
           => 정규화의 목적 : 데이터의 중복을 방지하고 효율적으로 데이터를 저장하기 위함
		           삽입, 삭제, 갱신 이상(Anomaly) 을 방지하기 위함
           => 정규화 순서 : 제1정규화 -> 제2정규화 -> 제3정규화 -> 필요에 의해 반정규화도 할 수 있다(되돌리다)
물리적 : 실제 DB 로 구현하는 과정 (엔티티가 테이블이 되고, 속성이 컬럼이 되고, 
			        인스턴스가 행이 된다.)

+ 문제해결시나리오
클래스다이어그램 보는법
+ : public
- : private
=> 접근제한자 기호 보고 어떤 필드가 있고 어떤 메소드가 있는지 파악해서
클래스 작성하기

 





